---
- name: Apply Patch (Scheduled Start)
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    dashboard_ip: "52.91.31.135"   # override with -e if needed
    ticket_id: "{{ lookup('pipe', 'uuidgen') }}"
    status_api: "http://{{ dashboard_ip }}:5000/api/status"
    patch_env: "dev"
    impact: "P3"
    approve_patching: ""   # default empty; can be set via -e or AWX survey

  tasks:
    - name: Update dashboard - Scheduled
      uri:
        url: "{{ status_api }}"
        method: POST
        body_format: json
        body:
          ticket_id: "{{ ticket_id }}"
          stage: "Scheduling"
          status: "Scheduled to start in 10 minutes"
          activity: "Patching"
          impact: "{{ impact }}"
          environment: "{{ patch_env }}"
      register: scheduled_response
      failed_when: scheduled_response.status != 200

    - name: Wait for scheduled patch time
      pause:
        minutes: 3
        prompt: "Waiting 10 minutes before patching begins..."

    - name: Ask for approval to proceed (interactive CLI)
      pause:
        prompt: "Do you want to proceed with patching? Type 'yes' to continue or 'no' to abort:"
      register: user_input
      when: approve_patching == ""

    - name: Set approval variable from input
      set_fact:
        approve_patching: "{{ user_input.user_input }}"
      when: approve_patching == ""

    - name: Fail if patching is denied
      fail:
        msg: "Patching was denied by the user."
      when: approve_patching | lower != 'yes'

    - name: Update dashboard - Patching Started
      uri:
        url: "{{ status_api }}"
        method: POST
        body_format: json
        body:
          ticket_id: "{{ ticket_id }}"
          stage: "Patching"
          status: "In Progress"
          activity: "Patching"
          impact: "{{ impact }}"
          environment: "{{ patch_env }}"
      register: patching_started_response
      failed_when: patching_started_response.status != 200

    - name: Simulate patching
      shell: "echo 'Patching server for ticket {{ ticket_id }}'"

    - name: Update dashboard - Patching Completed
      uri:
        url: "{{ status_api }}"
        method: POST
        body_format: json
        body:
          ticket_id: "{{ ticket_id }}"
          stage: "Patching"
          status: "Completed"
          activity: "Patching"
          impact: "{{ impact }}"
          environment: "{{ patch_env }}"
      register: patching_completed_response
      failed_when: patching_completed_response.status != 200

    - name: Debug responses
      debug:
        msg:
          - "Scheduled Response: {{ scheduled_response.json }}"
          - "Patching Started Response: {{ patching_started_response.json }}"
          - "Patching Completed Response: {{ patching_completed_response.json }}"
